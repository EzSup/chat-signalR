@page "/chat_chat={ChatName}&user={UserName}"
@rendermode InteractiveServer
@using ChatSignalR.Client.Services
@inject NavigationManager NavigationManager
@inject ChatHubService hubService

@using Microsoft.AspNetCore.SignalR.Client

<h3>Chat</h3>
<input @bind="_message" placeholder="Enter your message" @onkeypress="OnKeyPress" />
<button @onclick="SendMessage">Send</button>
<button @onclick="LeaveChat">Leave Chat</button>

<ul>
    @foreach (var msg in _messages)
    {
        <li><strong>@msg.UserName</strong>: @msg.MessageText <i>Sentiment: @msg.Sentiment</i></li>
    }
</ul>

@code {
    [Parameter]
    public string ChatName { get; set; } = "chat1";
    [Parameter]
    public string UserName { get; set; } = "user1";
    private string? _message;
    private List<ChatMessage> _messages = new List<ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        if (hubService.HubConnection.State == HubConnectionState.Disconnected)
        {
            await hubService.StartAsync();
            await hubService.HubConnection.SendAsync("JoinChat", ChatName, UserName);
        }

            hubService.HubConnection.On<ChatMessage>("ReceiveMessage", (message) =>
            {
                OnMessageRecieved(message);
        });
    }


    private void OnMessageRecieved(ChatMessage message)
    {
        _messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(_message))
        {
            await hubService.HubConnection.SendAsync("SendMessage", ChatName, UserName, _message);
            _message = string.Empty;
        }
    }

    private async Task LeaveChat()
    {
        await hubService.HubConnection.SendAsync("LeaveChat", ChatName, UserName);
        NavigationManager.NavigateTo("/");
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hubService.DisposeAsync();
    }

    public record ChatMessage(string UserName, string MessageText, MessageSentiment Sentiment);

    public enum MessageSentiment
    {
        Positive, Neutral, Negative, Mixed
    }
}
