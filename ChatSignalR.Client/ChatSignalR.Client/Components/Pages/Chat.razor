@page "/chat_chat={ChatName}&user={UserName}"
@using ChatSignalR.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ChatHubService hubService
@inject IJSRuntime JS

<div class="chat-container">
    <div class="chat-header">
        <h2>Chat: <strong>@ChatName</strong></h2>
        <h3>User: <strong>@UserName</strong></h3>
        <button class="leave-btn" @onclick="LeaveChat">Leave Chat</button>
    </div>

    <ul class="messages-list" @ref="messageListElement">
        @if(_messages.Count > 0){
            @foreach (var msg in _messages.ToList())
            {
                <li class="message-item" style="background-color:@GetBackgroundColor(msg.Sentiment)">
                    <strong class="message-user">@msg.UserName</strong>:
                    <span class="message-text">@msg.MessageText</span>
                    <span class="message-sentiment"><i>Sentiment: @msg.Sentiment</i></span>
                    <span class="message-sentiment"><i>@msg.SentTime.ToLocalTime().ToShortDateString() @msg.SentTime.ToLocalTime().ToShortTimeString()</i></span>
                </li>
            }
        }
        else
        {
            <h1>Loading messages list</h1>    
        }
    </ul>

    <div class="chat-input-container">
        <input class="message-input" @bind="_message" placeholder="Enter your message" @onkeypress="OnKeyPress" disabled="@(!hubService.IsConnected())" />
        <button class="send-btn" @onclick="SendMessage">Send</button>
    </div>
</div>

<script>
    function scrollToBottom(element) {
        element.scrollTop = element.scrollHeight;
    }
</script>

@code {
    [Parameter]
    public string ChatName { get; set; }
    [Parameter]
    public string UserName { get; set; }
    private string? _message;
    private List<ChatMessage> _messages = new List<ChatMessage>();

    private ElementReference messageListElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_messages.Any())
        {
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", messageListElement);
    }

    protected override async Task OnInitializedAsync()
    {
        if (hubService.IsConnected())
        {
            hubService.OnMessageListReceived += (message) => MessagesListRecieved(message);
            hubService.OnMessageReceived += (message) => MessageRecieved(message); 
            await hubService.JoinChat(ChatName, UserName);
        }
        await base.OnInitializedAsync();    
    }

    private void MessagesListRecieved(IEnumerable<ChatMessage> messages)
    {
        _messages = messages.ToList();
        InvokeAsync(StateHasChanged);
    }

    private void MessageRecieved(ChatMessage message)
    {
        _messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(_message))
        {
            await hubService.SendMessage(ChatName, UserName, _message);
            _message = string.Empty;
        }
    }

    private async Task LeaveChat()
    {
        await hubService.LeaveChat(ChatName, UserName);
        NavigationManager.NavigateTo("/");
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            SendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hubService.DisposeAsync();
    }

    private string GetBackgroundColor(MessageSentiment sentiment)
    {
        switch (sentiment)
        {
            case MessageSentiment.Positive: return "#7dd87d";
            case MessageSentiment.Negative: return "#be3144";
            case MessageSentiment.Neutral: return "#e6e6e6";
            default: return "#e6e6e6";
        }
    }

    public record ChatMessage(string UserName, string MessageText, MessageSentiment Sentiment, DateTime SentTime);

    public enum MessageSentiment
    {
        Positive, Neutral, Negative, Mixed
    }
}
